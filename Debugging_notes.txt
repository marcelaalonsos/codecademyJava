Debugging

Introduction to Bugs

- in Java there are many different ways of classifying errors, but they can be boiled down to 3 categories:
- Syntax errors: errors found by the compiler
- Run-time errors: errors that occur when the program is running
- Logic errors: errors found by the programmer looking for the causes of erroneous results

Syntax Errors

- represent grammar errors in the use of the programming language
- they are the easiest to find and correct
- the compiler will tell you where it got into trouble, and its best guess as to what you did wrong

- some common syntax errors:
- misspelled variable and method names
- ommitting semicolons ;
- ommitting closing parenthesis, square brackets, or curly brackets
- here's an example of a syntax error message:
Debug.java:5: error: ';' expected
  int year = 2019
                  ^
1 error

- usually the error is on the exact line indicated by the compiler, or the line just before it
- however, if the problem is incorrectly nested braces, the actual error may be at the beginning of the nested block


Run-time Errors

- errors which happen during program execution (run-time) after successful compilation are called run-time errors
- run-time errors occur when a program with no compiler-time errors asks the computer to do something that the computer is unable to reliably do
- some common run-time errors:
- division by zero also known as division error
- trying to open a file that doesn't exist

- there is no way for the compiler to know about these kinds of errors when the program is compiled
- here's an example of a run-time error message:

Exceptions

- in the last exercise when we were dealing with run-time errors, you might've noticed a new word in the error message: Exception
- java uses exceptions to handle errors and other exceptional events
- exceptions are conditions that occur at runtime and may cause the termination of the program

- when an exception occurs, Java displays a message that includes the name of the exception, the line of the program where the exception occurred, and a stack trace
- the stack trace includes:
- the method that was running
- the method that invoked it
- the method that invoked that one

- some common exceptions that you will see in the wild:
- arithmeticException: something went wrong during an arithmetic operation, for example, division by zero
- nullPointerException: you tried to access an instance variable or invloke a method on an object that is currently null
- arryaIndexOutOfBoundsException: the index you are using its either negative or greater than the last index of the array
- fileNotFoundException: java didn't find the file it was looking for

Exception Handling

- exception handling is an essential feature of java programming that allows us to use run-time error exceptions to make our debugging process a little easier
- one way to handle exceptions is using the try / catch:
- the try statement allows you to define a block of code to be tested for errors while its being executed
- the catch statement allows you to define a block of code to be executed if an error occurs in the try block

- the try and catch keywords come in pairs, though you can also catch several types of exceptions in a single block:
try {

  //  Block of code to try

} catch (NullPointerException e) {

  // Print the error message like this:
  System.err.println("NullPointerException: " + e.getMessage());

  // Or handle the error another way here

}

- notice how we used System.err.println() here instead of System.out.println()
- System.err.println() will print to the standard error and the text will be in red

- you can also chain exceptions together:
try {

  //  Block of code to try

} catch (NullPointerException e) {

  //  Code to handle a NullPointerException

} catch (ArithmeticException e) {

  //  Code to handle an ArithmeticException

}

Logic Errors

- logic errors occur when there is a design flaw in your program
- these are someof the most common errors that happen to beginners and also usually the most difficult to find and eliminate
- because logical errors solely depend on the logical thinking of the programmer, your job now is to figure out why the program didn't do what you wanted it to do

- some common logic errors:
- program logic is flawed
- "silly" mistakes in an if statement or a for / while loop

Debugging Techniques

1. Divide and conquer: comment out or temporarily delete half the code to isolate an issue:
- if the program compiles now, you know the error is in the code you deleted
- bring back half of what you removed and repeat
- if the program still doesn't compile, the error must be in the code that remains
- delete about half of the remaining code and repeat

tip: in most code editors, one can highlight a block of code and use the keyword shortcut ctrl + / to comment it out

2. Print statements for the rescue:
- use System.out.println() to check variable/return values at various points throughout the program
- a lot ofthe time with logic errors, there was a flawed piece of logic, a miscalculation, a missing step, etc
- by printing out values at different stages of the execution flow, you can then hopefully pinpoint where you made a mistake
