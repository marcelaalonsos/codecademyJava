Arrays

Introduction

- an array holds a fixed number of values of one type
- arrays hold double, ints, boolean and other primitives
- arrays can also contain string as well as object references
- each index of an array corresponds with a different value

Creating an Array Explicitly

- to create an array, we provide a name and declare the type of data it holds:
double[] prices;

- just like variables, we can declare and initialize in the same line
- this allows us to explicitly initialize the array to contain the data we want to store:
double[] prices = {13.15, 15.87, 14.22, 16.66};

- we can use arrays to hold string and other objects as well as primitives:
String[] clothingItems = {"Tank Top", "Beanie", "Funny Socks", "Corduroys"};

Importing Arrays
- write import java.util.Arrays as a header file to use all the methods to apply to arrays
- the Arrays package has many useful methods, including Arrays.toString()
- when we pass an array into Arrays.toString() we can see the contents of the array printed out:
import java.util.Arrays;

public class Lottery(){

  public static void main(String[] args){
    int[] lotteryNumbers = {4, 8, 15, 16, 23, 42};
    String betterPrintout = Arrays.toString(lotteryNumbers);
    System.out.println(betterPrintout);
  }

}

- this will print out:
[4, 8, 15, 16, 23, 42]

Get Element By Index

- we use square brackets to access data at a certain index:
double[] prices = {13.1, 15.87, 14.22, 16.66};

System.out.println(prices[1]);

- the command would print:
15.87

- this happens because 15.87 is the item at the 1 index of the array
- remember, the index of an array starts at 0 and ends at an index of one less than the number of elements in the array
- if we try to access an element outside of its appropriate index range, we will receive an ArrayIndexOutOfBoundsException error

Creating an Empty Array

- we can also create empty arrays and then fill the items one by one
- empty arrays have to be initialized with a fixed size:
String[] menuItems = new String[5];

- once you declare this size, it cannot be changed
- after declaring and initializing, we can set each index of the array to be a different item:
menuItems[0] = "Veggie hot dog";
menuItems[1] = "Potato salad";
menuItems[2] = "Cornbread";
menuItems[3] = "Roasted broccoli";
menuItems[4] = "Coffee ice cream";

- this group of commands has the same effect as assigning the entire array at one:
String[] menuItems = {"Veggie hot dog", "Potato salad", "Cornbread", "Roasted broccoli", "Coffee ice cream"};

- we can also change an item it has been assigned:
menuItems[3] = "Baked cauliflower";

- now the array looks like:
["Veggie hot dog", "Potato salad", "Cornbread", "Baked cauliflower", "Coffee ice cream"]

- when we use new to create an empty array, each element of the array is initialized with a specific value depending on what type the element is
- for example, consider the following arrays:
String[] my_names = new String[5];
int[] my_ages = new int[5];

- because a string is a reference to an Object, my_names will contain five null
- my_ages will contain five 0 to begin with

Length

- to get the length of an array, we can access the length field of the array object:
String[] menuItems = new String[5];
System.out.println(menuItems.length);

- this command would print 5 since the menuItems array has 5 slots, even though they are all empty
- if we print out the length of the prices array:
double[] prices = {13.1, 15.87, 14.22, 16.66};

System.out.println(prices.length);
- we would see 4 since there are four items in the prices array

String[] args

- when we write main() methods for our programs, we use the parameter String[] args
- now that we know about array syntax, we can start to parse what this means
- A String[] is an array made up of strings:
String[] humans = {"Talesha", "Gareth", "Cassie", "Alex"};
String[] robots = {"R2D2", "Marvin", "Bender", "Ava"};

- the args parameter is another example of a string array
- in this case, the array args contains the arguments that we pass in from the terminal when we run the class file
- so far args has been empty
- so how can you pass arguments to main()?:
public class HelloYou {
  public static void main(String[] args) {
    System.out.println("Hello " + args[0]);
  }
}

- when we run the file HelloYou in the terminal with an argument of "Laura":
java HelloYou Laura

- we get the output:
Hello Laura

- the String[] args would be implemented as an array with one element "laura"
- when we use args[0] in the main method, we can access that element like we did in HelloYou

ArrayList: Introduction

- when we work with arrays in Java, we've been limited by the fact that once an array is created, it has a fixed size
- we cannot add or remove elements
- but what if we needed to add to the book lists, newsfeeds, and other structures we were using arrays to represent?
- to create mutable and dynamic lists, we can use Java's ArrayList class
- ArrayList allows us to:
- store object references as elements
- store elements of the same type (just like arrays)
- access elements by index (just like arrays)
- add elements
- remove elements

- remember how we had to import java.util.Arrays in order to use additional array methods?
- to use an ArrayList at all, we need to import them from Java's util package:
import java.util.ArrayList;

Creating ArrayLists

- to create an ArrayList, we need to declare the type of objects it will hold, just as we do with arrays:
ArrayList<String> babyNames;

- we use angle brackets < and > to declare the type of the ArrayList
- these symbols are used for generics
- Generics are a Java construct that allows us to define classes and objects as parameters of an ArrayList
- for this reason, we can't use primitive types in an ArrayList:
// This code won't compile:
ArrayList<int> ages;

// This code will compile:
ArrayList<Integer> ages;

- the <Integer> generic has to be used in an ArrayList instead
- you can also use <Double> and <Character> for types you would normally declare are double or char
- we can initialize to an empty ArrayList using the new keyword:
// Declaring:
ArrayList<Integer> ages;
// Initializing:
ages = new ArrayList<Integer>();

// Declaring and initializing in one line:
ArrayList<String> babyNames = new ArrayList<String>();

Adding an Item

- ArrayList comes with an add() method which inserts an element into the structure
- there are two ways we can use add()
- if we want to add an element to the end of the ArrayList, we'll call add() using only one argument that represents the value we are inserting
- in this example, we'll add objects from the Car class to an ArrayList called carShow:
ArrayList<Car> carShow = new ArrayList<Car>();

carShow.add(ferrari);
// carShow now holds [ferrari]
carShow.add(thunderbird);
// carShow now holds [ferrari, thunderbird]
carShow.add(volkswagen);
// carShow now holds [ferrari, thunderbird, volkswagen]

- if we want to add and element ar a specific index of our ArrayList, we'll need two arguments in our method call:
- the first argument will define the index of the new element while the second argument defines the value of the new element:
// Insert object corvette at index 1
carShow.add(1, corvette);
// carShow now holds [ferrari, corvette, thunderbird, volkswagen]

// Insert object porsche at index 2
carShow.add(2, porsche);
// carShow now holds [ferrari, corvette, porsche, thunderbird, volkswagen]

- by inserting a value at a specific index, any elements that appear after this new element will have their index value shift by 1
- note that an error will occur if we try to insert a value at an index that does not exist

- when using ArrayList methods like add(), the reference paramaters and return type of a method must match the declared element type of the ArrayList
- for example, we cannot add an Integer type value to an ArrayList of string elements
- it is possible to create an ArrayList that holds values of different types
- in the following snippet, assortment is an ArrayList that can store different values because we do not specify its type during initialization:
ArrayList assortment = new ArrayList<>();
assortment.add("Hello"); // String
assortment.add(12); // Integer
assortment.add(ferrari); // reference to Car
// assortment holds ["Hello", 12, ferrari]

- in this case, the items stored in this ArrayList will be considered Objects
- as a result, they won't have access to some of their methods without doing some fancy casting
- although this type of ArrayList is allowed, using an ArrayList that specifies its type is preferred

ArrayList Size

- if we wanted to display the number of items in an ArrayList, we could find the size of it using the size() method:
ArrayList<String> shoppingCart = new ArrayList<String>();

shoppingCart.add("Trench Coat");
System.out.println(shoppingCart.size());
// 1 is printed
shoppingCart.add("Tweed Houndstooth Hat");
System.out.println(shoppingCart.size());
// 2 is printed
shoppingCart.add("Magnifying Glass");
System.out.println(shoppingCart.size());
// 3 is printed

- in dynamic objects like ArrayList it's important to know how to access the amount of objects we have stored

Accessing an Index

- for ArrayList, we use the method get() to access an index:
ArrayList<String> shoppingCart = new ArrayList<String>();

shoppingCart.add("Trench Coat");
shoppingCart.add("Tweed Houndstooth Hat");
shoppingCart.add("Magnifying Glass");

System.out.println(shoppingCart.get(2));

- this code prints "Magnifying Glass", which is the value at index 2 of the ArrayList

Changing a Value

- ArrayList has a slightly different way to reassign values, using te set() method:
ArrayList<String> shoppingCart = new ArrayList<String>();

shoppingCart.add("Trench Coat");
shoppingCart.add("Tweed Houndstooth Hat");
shoppingCart.add("Magnifying Glass");

shoppingCart.set(0, "Tweed Cape");

// shoppingCart now holds ["Tweed Cape", "Tweed Houndstooth Hat", "Magnifying Glass"]

Removing an Item

- remove an item by specifying the index to remove:
ArrayList<String> shoppingCart = new ArrayList<String>();

shoppingCart.add("Trench Coat");
shoppingCart.add("Tweed Houndstooth Hat");
shoppingCart.add("Magnifying Glass");

shoppingCart.remove(1);
// shoppingCart now holds ["Trench Coat", "Magnifying Glass"]

- we can also remove an item by specifying the value to remove:
ArrayList<String> shoppingCart = new ArrayList<String>();

shoppingCart.add("Trench Coat");
shoppingCart.add("Tweed Houndstooth Hat");
shoppingCart.add("Magnifying Glass");

shoppingCart.remove("Trench Coat");
// shoppingCart now holds ["Tweed Houndstooth Hat", "Magnifying Glass"]

- this command removes the FIRST instance of the value "Trench Coat"

Getting an Item's Index

- what if we had a really large list and we wanted to know the position of a certain element in it?
- for instance, what if we had an ArrayList detectives with the names of detectives in chronological order, and we wanted to know what position "Fletcher" was:
// detectives holds ["Holmes", "Poirot", "Marple", "Spade", "Fletcher", "Conan", "Ramotswe"];
System.out.println(detectives.indexOf("Fletcher"));

- this code would print 4 since "Fletcher" is at index 4 of the detectives ArrayList
