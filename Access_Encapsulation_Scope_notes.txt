Access, Encapsulation, Scope

What are access and scope?

access:
- the public and private keywords and how they related to classes, variables, constructors and methods
- the concept of Encapsulation
- accessor methods, sometimes known as "getters"
- mutator methods, sometimes known as "setters"

Scope:
- local variables vs instance variables
- the this keyword

The Public keyword

- the keywords public and private are defining what parts of your code have access to other parts of your code
- we can define the access of many different parts of our code including instance variables, methods, constructors, and even a class itself
- if we choose to declare these as public, this means that any part of our code can interact with them - even if that code is in a different class
- the way we declare something to be public is to use the public keyword in the declaration statement
- in the code block below, we have a public class, constructor, instance variables and method
- notice the five different uses of public:
public class Dog{
  public String name;
  public int age;

  public Dog(String input_name, int input_age){
    name = input_name;
    age = input_age;
  }

  public void speak() {
    System.out.println("Arf Arf! My name is " + name + " and I am a good dog!");
  }
}

- since everything about Dog is public, any other class can access anything about a Dog
- for example, let's say there was a DogSchool class
- any method of the DogSchool class could make a new Sog using the public Do constructor, directly access that Dog's instance variables, and directly use that Dog's methods:
public class DogSchool{
  public void makeADog(){
    Dog cujo = new Dog("Cujo", 7);
    System.out.println(cujo.age);
    cujo.speak();
  }
}

- notice that the DogSchool class and the makeADog() method are also public
- this means that if some other class created a DogSchool, they would have access to these methods as well
- one final thing to note is that for the purposes of this lesson, we'll almost always make our classes and constructors public
- while you can set them to private, it's fairly uncommon to do so

The private keyword and Encapsulation

- when a class' instance variable or method is marked as private, that means you can only access those structures from elsewhere inside that same class
public class DogSchool{

  public void makeADog(){
    Dog cujo = new Dog("Cujo", 7);
    System.out.println(cujo.age);
    cujo.speak();
  }
}

- makeADog is trying to access a Dog's .age variable
- it's also trying to use the .speak method
- if those are marked as private in the Dog class, the DogSchool class won't be able to do that
- other methods within the Dog class would be able to use .age or .speak, but other classes won't have access

- sometimes restricting our code is actually useful from a design perspective
- this is one of the core ideas behind encapsulation
- by making our instance variables and some methods private, we encapsulate our code into nice little bundles of logic
- for example, a Bank object doesn't necessarily need to know the inner workings of a CheckingAccount object
- it doesn't need to know that the money is stored in a field named money, or that interest is added to an account by using a method named .addInterest()
- in fact, if it had access to those fields or methods, it's possible that someone using a Bank object, could change things in a CheckingAccount without realizing it
- by limiting access by using the keyword private, we are able to segment or encapsulate our code into individual units
- note that we don't necessarily want to completely block everything from other classes


Accessor and Mutator Methods

- when writing classes, we often make all of our instance variables private
- however, we still might want some other classes to have access to them, we just don't want those classes to know the exact variable name
- to give other classes access to a private instance variable, we would write an accessor method - getter method:
public class Dog{
  private String name;

  //Other methods and constructors

  public String getName() {
    return name;
  }
}

- even though the instance variable name is private, other classes could call the public method getName() which returns the value of that instance variable
- accessor methods will always be public, and will have a return type that matches the type o the instance variable they're accessing
- similarly, private intance variables often have mutator methods - setters
- these methods allow other classes to reset the value stored in private instance variables:
public class Dog{
  private String name;

  //Other methods and constructors

  public void setName(String newName) {
    name = newName;
  }

  public static void main(String[] args){
    Dog myDog = new Dog("Cujo");
    myDog.setName("Lassie");
  }
}

- mutator methods, or setters often are void methods -they don't return anything, they just reset the value of an existing variable
- similarly, they often have one parameter that is the same type as the variable they're trying to change

Scope: Local Variables

- in addition to access modifiers like public and private, the scope of the variable also determines what parts of your code can access that variable
- the scope of a variable is determined by where the variable is declared
- for example, because instance variables are declared inside a class but outside any methods or constructors, all methods and constructors are within the scope of that variable
- for example, in the code block below, constructors and methods of the Dog class are using the Dog instance variables like name and age:
class Dog{
  public String name;
  public int age;
  public int weight;

  public Dog(){
    name = "Winston";
    age = 8;
    weight = 30;
  }

  public void speak(){
    System.out.println("My name is " + name);
  }
}

- however, if you have a variable declared inside a method, that variable can only be used inside that method
- the same is true for parameters
- the scope of those parameters is only the method they're associated with
- if you try to use a parameter outside the function it's defined in, you'll get an error
- these variables are often called local variables
- note that we don't use public or private when declaring local variables
- this idea of scope extends to conditionals and loops as well
- if you declare a variable inside the body of a conditional or loop, that variable can only be used for that structure
- this also incldues the variable you are using as your looping variable:
for(int i = 0; i < 10; i++){
  // You can use i here
}
// i is out of scope here

- you can only use i between the curly braces of the for loop
- in general, whenever you see curly braces, be aware of scope
- if a variable is defined inside curly braces, and you try to use that variable outside those curly braces, you will likely see an error

Scope: the this keyword

- often times when creating classes, programmers will create local variables with the same name as instance variables:
public class Dog{
  public String name;

  public Dog(String inputName){
    name = inputName;
  }

  public void speakNewName(String name){
    System.out.println("Hello, my new name is" + name);
  }

  public static void main(String[] args){
    Dog myDog = new Dog("Winston");
    myDog.speakNewName("Darla"); // Prints "Darla" - "Winston" ignored

  }
}

- we have an instance variable named name, but the method speakNewName has a parameter named name
- so when the method tries to print name, which variable will be printed?
- by default, java refers to the local variable name
- so in this case, the value passed to the parameter will be printed and not the instance variable
- if we wanted to access the instance variable and not the local variable, we could use the this keyword:
public class Dog{
  public String name;

  public Dog(String inputName){
    name = inputName;
  }

  public void speakNewName(String name){
    System.out.println("Hello, my new name is" + this.name);
  }

  public static void main(String[] args){
    Dog a = new Dog("Fido");
    Dog b = new Dog("Odie");

    a.speakNewName("Winston");
    // "Fido", the instance variable of Dog a is printed. "Winston" is ignored

    b.speakNewName("Darla");
    // "Odie", the instance variable of Dog b is printed. "Darla" is ignored.
  }
}

- the this keyword is a reference to the current object
- we used this.name in our speakNewName method
- this caused the method to print out the value stored in the instance variable name of whatever Dog object called speakNewName
- note that in this somewhat contrived example, the local variable name used as a parameter gets completely ignored

-often times, you'll see constructors have parameters with the same name as the instance variable:
public Dog(String name){
  this.name = name;
}

- you can read this as "set this Dog's instance variable name equal to the variable passed into the constructor"
- while this naming is common convention, it can also be confusing
- there's nothing wrong with naming your parameters something else to be more clear
- sometimes you will see something like:
public Dog(String inputName){
  this.name = inputName;
}
- this is now a little clearer - we're setting the Dog's instance variable name to the name we give the constructor
- finally, mutator methods also usually follow this pattern:
public void setName(String name){
  this.name = name;
}

- we reset the instance variable to the value passed into the parameter
- this will refer to an instance variable
- this isn't always explicitly necessary - if there's no local variable with the same name, Java will know to use the instance variable with that name
- that being said, it is a good habit to use this, when working with your instance variables to avoid potential confusion

Using this with Methods

- we can also use this with methods
- recall how we've been calling methods up to this point:
public static void main(String[] args){
  Dog myDog = new Dog("Odie");
  myDog.speak();
}

- here, we are creating an instance of a Dog and using that Dog to call the speak() method
- however, when defining methods, we can also use the this keyword to call other methods:
public class Computer{
  public int brightness;
  public int volume;

  public void setBrightness(int inputBrightness){
    this.brightness = inputBrightness;
  }

  public void setVolume(int inputVolume){
    this.volume = inputVolume;
  }

  public void resetSettings(){
    this.setBrightness(0);
    this.setVolume(0);
  }
}

- take a look at the resetSettings() method
- this method calls other methods from the class
- but it needs and object to call those methods
- rather than create a new object, we use this as the object
- what this means is that the object that calls resetSettings() will be used to call setBrightness(0) and setVolume(0)

public static void main(String[] args){
  Computer myComputer = new Computer();
  myComputer.resetSettings();
}

- in this example, calling myComputer.resetSettings() is as if we called myComputer.setBrightness(0) and myComputer.setVolume(0)
- this serves as a placeholder for whatever object was used to call the original method

- finally, this can be used as a value for a parameter
- let's say a method exists that takes a Computer as a parameter (that method's signature might be something like public void pairWithOtherComputer(Computer other))
- if you are writing another method of the computer, and want to call pairWithOtherComputer method, you could use this as a parameter
- that call might look something like this.pairWithOtherComputer(this)
- you are using the current object to call the method and are passing that object as that method's parameter:
public void pairWithOtherComputer(Computer other){
  // Code for method that uses the parameter other
}

public void setUpConnection(){
  // We use "this" to call the method and also pass "this" to the method so it can be used in that method
  this.pairWithOtherComputer(this);
}

Other private methods
- now that we've seen how methods can call other methods using this, let's look at a situation where you might want to use private methods
- often times, private methods are helper methods - that is to say that they're methods that other, bigger methods use
- for example, for our CheckingAccount example, we might want a public method like getAccountInformation() that prints information like the name of the account owner, the amount of money in the account, and the amount of interest the account will make in a month
- that way, another class like a Bank, could call that public method to get all that infortmation quickly

- in order to get that information, we might want to break that larger method into several helper methods
- for example, inside getAccountInformation(), we might want to call a function called calculateNextMonthInterest()
- that helper method should probably be private
- there's no need for a Bank to call these smaller helper methods
- instead, a Bank can call the one public method and rely on that method to do all of the complicated work by calling smaller private methods


