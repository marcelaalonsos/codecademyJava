Static Variables and Methods

Static Methods Refresher

- static methods are methods that belong to an entire class, not a specific object of the class
- static methods are called using the class nameand the . operator:
double randomNumber = Math.random();
// Stores a random decimal between 0.0 and 1.0 in randomNumber

double number = Double.valueOf("2.5");
// Transforms the String "2.5" into a double

- in the first example, random() is a static method that belongs to the Math class
- we didn't have to create a Math object to use the method
- similarly, valueOf() is a static method of the Double class
- given a string as an input, this method will turn that string into a double

- finally, notice that our main() methods have been static this whole time
- when Java runs your program, it calls that the main method of your class

Static Variables

- static variables belong to the class itself instead of belonging to a particular object of the class
- we can access static variables by using the name of the class and the . operator
- finally, we declare static variables by using the static keyword during declaration
- this keyword usually comes after the variable's access modifier (public or private)
- when we put this together:
public class Dog{

  // Static variables
  public static String genus = "Canis";

  //Instance variables
  public int age;
  public String name;

  public Dog(int inputAge, String inputName){
    this.age = inputAge;
    this.name = inputName;
  }
}

- since all dogs share the same genus, we could use a static variable to store that information for the entire class
- however, we want each dog to have its own unique name and age, so those aren't static
- we could now access this static variable in a main() function like:
public class Dog{
  //Variables, constructors and methods defined here

  public static void main(String[] args){
    System.out.println(Dog.genus); // Prints Canis
  }
}

- unlike static methods, you can still access static variables from a specific object of the class
- however, no matter what object you use to access the variable, the value will always be the same
- you can think of it as all objects of the class sharing the same variable:
public static void main(String[] args){
  Dog snoopy = new Dog(3, "Snoopy");
  Dog ringo = new Dog(5, "Ringo");

  System.out.println(Dog.genus); // Prints Canis
  System.out.println(snoopy.genus); // Prints Canis
  System.out.println(ringo.genus); // Prints Canis
}

- finally, you might have seen a few static variables before
- if you want to easy access the largest possible integer, you can get it by using Integer.MAX_VALUE
- if you look at the documentation, you'll see that this variable is public, static, and final
- final means that you can't change the variable's value after creating it

Modifying Static Variables

- often times, static variables are used to keep track of information about all objects of a class
- for example, our variable numATMs is keeping track of the total number of ATMs in the system
- therefore, every time an ATM is created (using the constructor) we should increase that variable by 1
- if we could somehow destroy an ATM, the method that destroys it should decrease numATMs static variable by 1
- similarly, we have a variable named totalMoney
- this variable is keeping track of all the money across all ATMs
- whenever we removed money from an ATM using the non-static withdrawMoney() method, we should modify the money instance variable of that particular ATM as well as the totalMoney variable
- in doing so, all ATMs will know how much money is in the system

Writing your own Static Methods

- to create a static method, use the static keyword in the method's definition
- this keyword comes after public or private:
public static void myFirstStaticMethod(){
  // Some code here
}

- often times, you'll see static methods that are accessors or mutators for static variables:
public static int getMyStaticVariable(){
  return myStaticVariable;
}

public static void setMyStaticVariable(int newValue){
  myStaticVariable = newValue;
}

- one important rule to note is that static methods can't interact with non-static instance variables
- consider why we use this when working with non-static instance variables
- let's say we have a Dog class with a non-static instance variable named age
- if we have a line of code like this.age = 5, that means we're setting the age of a specific Dog equal to 5
- however, if age were static, that would mean that the variable belongs to the entire class, not the specific object
- the this keyword can't be used by a static method since static methods are associated with an entire class, not a specific object of that class
- if you try to mix this with a static method, you'll see the error message:
non-static variable this cannot be referenced from a static context

Review:

- Static methods and variables are associated with the class as a whole, not objects of the class.

- Static methods and variables are declared as static by using the static keyword upon declaration.

- Static methods cannot interact with non-static instance variables. This is due to static methods not having a this reference.

- Both static methods and non-static methods can interact with static variables.
