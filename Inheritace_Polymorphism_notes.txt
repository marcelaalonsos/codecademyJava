Inheritance and Polymorphism

Introducing Inheritance

- suppose we are building a Shape class in Java
- we might give it some points in 2D, a method for calculating the area, and another method for displaying the shape
- but what happens if we want a class for a triangle that has some triangle-specific methods?
- do we need to redefine all of the same methods that we created for shape?
- no, a Java class can also inherit traits from another class
- because triangle is a shape, we can define triangle so that it inherits fields and methods directly from shape or an object of triangle
- the object-oriented principle of Inheritance saves us the headache of redefining the same class members all over again

-our triangle class will inherit all the traits of shape, but triangle can also contain its own unique methods and variables
- for example, we could have an instance variable called hypotenuse and a method called findHypotenuse() that can only be accessed by triangle class references
- objects of triangle can call any method contained in triangle or shape
- terms:
- parent class, superclass, and base class refer to the class that another class inherits from (like shape)
- child class, subclass, and derived class refer to a class that inherits from another class (like triangle)

Inheritance in Practice

- how do we define a child class so that it inherits from a parent class?
- we use the keyword extends like this:
class Shape {
  //Shape class members
}

class Triangle extends Shape {
  //additional Triangle class members
}

- now Triangle has inherited traits from Shape, meaning it copied over class members from Shape
- when we use inheritance to extend a subclass from a superclass, we create an "as-is" relationship from the subclass to the superclass
- for example, an object of Triangle is a member of the Shape class; however, an object of Shape is not necessarily an object of Triangle
- most Java programs utilize multiple classes, each of which require its own file
- only one file needs a main() method - this is the file we will run
- note: the various classes in our Java package -even though they are in different files -will have access to each other, so we can instantiate one class inside of another

Inheriting the Constructor

- let's take a look at how the super() constructor works
- let's say Shape has a numSides field that is set by passing an integer to the constructor
- if we're instantiating a Triangle, we would want that number to always be 3, so we'd want to modify the constructor to automatically assign numSides with a value of 3
- can we do that?
- as it happens, Java has a trick up its sleeve for just this occassion: using the super() method which acts like the parent constructor inside the child class constructor:
class Triangle extends Shape {

  Triangle() {
    super(3);
  }

  // additional Triangle class members

}

- by passing 3 to super(), we are making it possible to instantiate a Triangle without passing in a value of numSides
- meanwhile, super(3) (behaving as Shape(3)) will shoulder the responsibility of setting numSides to 3 for our Triangle object
- it's like we called Shape(3)

- it is also possible to write a constructor without making a call to any super() constructor:
class Triangle extends Shape {

  Triangle() {
    this.numSides = 3;
  }

  // additional Triangle class methods

}

- in this situation, Java secretly calls the parent class' no-argument constructor (super())
- so in this specific example, the Triangle() constructor first calls the Shape() constructor
- that Shape() takes care of whatever business it needs to take care of
- and then after that is complete, we go in and set this.numSides to 3

- if you're writing a constructor of a child class, and don't explicitly make a call to a constructor from a parent class using super, it is important to remember that Java will automatically (and secretly) call super() as the first line of your child class constructor

Parent Class Aspect Modifiers

- you may recall that Java class members use private and public access modifiers to determine whether they can be accessed from outside the class
- so does a child class inherit its parent's private members?
- no
- but there is another access modifier we can use to keep a parent class member accessible to its child classes and to files in the package it's contained in - and otherwise private: protected
- here is what protected looks like in use:
class Shape {

  protected double perimeter;

}

// any child class of Shape can access perimeter

- in addition to access modifiers, there's another way to establish how child classes can interact with inherited parent class members: using the final keyword
- if we add final after a parent class method's access modifier, we disallow any child classes from changing that method
- this is helpful in limiting bugs that might occur from modifying a particular method

- though it is not required, there is an established order when two or more field modifiers are used (eg. public final)

Introducing Polymorphism

- in Java, if Orange is a fruit through inheritance, you can then use Orange in the same contexts as Fruit like this:
String makeJuice(Fruit fruit) {

  return "Apple juice and " + fruit.squeeze();

}

// inside main()
Orange orange = new Orange();
System.out.println(juicer.makeJuice(orange));

- how does that work?
- this is because Java incorporates the object-oriented programming principle of Polymorphism
- Polymorphism allows a child class to share information and behavior of its parent class while also incorporating its own functionality
- the main advantages of polymorphic programming:
- simplifying syntax
- reducing cognitive overload for developers

Method Overriding

- one common use of Polymorphism with Java classes is something we mentioned earlier, overriding parent class methods in a child class
- like the + operator, we can give a single method slightly different meanings for different classes
- this is useful when we want our child class method to have the same name as a parent class method but behave a bit differently in some way
- let's say we have a BankAccount class that allows us to print the current balance
- we want to build a CheckingAccount class that inherits the functionality of a BankAccount but with a modified printBalance() method:
class BankAccount {
  protected double balance;

  public BankAccount(double balanceIn){
    balance = balanceIn;
  }

  public void printBalance() {
    System.out.println("Your account balance is $" + balance);
  }
}

class CheckingAccount extends BankAccount {

  public CheckingAccount(double balance) {
    super(balance);
  }

  @Override
  public void printBalance() {
    System.out.println("Your checking account balance is $" + balance);
  }
}

- notice that in order to properly override printBalance() in CheckingAccount the method has the following in common with the corresponding method in BankAccount:
- method name
- return type
- number and type of parameters

- you may also have noticed @override keyword above printBalance() in CheckingAccount
- this annotation informs the compiler that we want to override a method in the parent class
- if the method doesn't exist in the parent class, we'll get an error when we compile the program

- in the previous exercise, we learned that the super keyword can be used to call the constructor of a superclass
- that's not the only use of a super
- we can also use this keyword to call the methods of a parent class
- while we now have the ability to override methods from a superclass, we may find ourselves in a unique situation where we want to use the superclass method instead of the subclass' overridden method
- if that's the case, we can call the parent class method by prepending super followed by the dot operator  to the method call
- note that this only works if we pass in the proper method parameters
- let's see this in action by adding a checkBalances() method to CheckingAccount that calls both versions of printBalance():

 class CheckingAccount extends BankAccount {
  public CheckingAccount(double balance) {
    super(balance);
  }

  @Override
  public void printBalance() {
    System.out.println("Your checking account balance is $" + balance);
  }

  public void checkBalances() {
    // calls method from CheckingAccount
    printBalance();
    // calls method from BankAccount
    super.printBalance();
  }

  public static void main(String[] args) {
    CheckingAccount myCheckings = new CheckingAccount(5000);
    myCheckings.checkBalances();
  }
}

- this program will outout:
Your checking account balance is $5000
Your account balance is $5000


Using a Child Class as its Parent Class

- an important facet of Polymorphism is the ability to use a child class object where an object of its parent class is expected
- one way to do this explicitly is to instantiate a child class object as a member of the parent class
- we can instantiate a CheckingAccount object as a BankAccount like this:

BankAccount kaylasAccount = new CheckingAccount(600.00);

- we can use kaylasAccount as if it were an instance of BankAccount, in any situation where a BankAccount object would be expected
- this would be true even if kaylasAccount were instantiated as a CheckingAccount, but using the explicit child as parent syntax is most helpful when we want to declare objects in bulk
- it is importnat to note that the compiler just considers kaylasAccount to be any old BankAccount
- but because method overriding is handled at runtime, if we call printBalance(), we'll see something CheckingAccount specific:
Your checking account balance is $600.00

- this is because at runtime, kaylasAccount is recognized as the CheckingAccount it is
- so what if CheckingAccount has a method transferToSavings() that BankAccount does not have?
- can kaylasAccount still use it as a method?
- no
- the compiler believes that kaylasAccount is just a BankAccount that doesn't have some fancy child class transferToSavings() method, so it would throw an error

Child Classes in Arrays and ArrayLists

- usually, when we create an array or an ArrayList, the list items all need to be the same type
- but Polymorphism puts a new spin on what is considered the same type
- in fact, we can put instances of different classes that share a parent class together in an array or ArrayList
- for example, let's say we have a Monster parent class with a few child classes: Vampire, Werewolf and Zombie
- we can set up an array with instances of each:
Monster dracula, wolfman, zombie1;

dracula = new Vampire();
wolfman = new Werewolf();
zombie1 = new Zombie();

Monster[] monsters = {dracula, wolfman, zombie1};

- we can even iterate through the list of items -regardles of subclass, and perform the same action with each item:
for (Monster monster : monsters) {

  monster.attack();

}

- in the code above, we were able to call attack() on each monster in monsters despite the fact that, in the for-each loop, monster is declared as the parent calls type Monster

Child Classes in Method parameters

- when we call a method that contains parameters, the arguments we place in our method call must match the parameter type
- similar to the previous exercise, Polymorphism gives us a little more flexibility with the arguments we can use
- if we use a superclass reference as a method parameter, we can call the method using subclass reference arguments
- for example, imagine the class ScaryStory, whose constructor takes in a reference to the Monster class:
class ScaryStory {
  Monster monster;
  String setting;

  public ScaryStory(Monster antagonist, String place) {
    monster = antagonist;
    setting = place;
  }

  public void tellStory(){
    System.out.println("Once upon a time, " + monster.name + " was at " + setting + " looking to scare some mortals.");
  }

  public static void main(String[] args) {
    Monster dracula;
    dracula = new Vampire("Dracula");
    ScaryStory countDracula = new ScaryStory(dracula, "Dracula Castle");
    countDracula.tellStory();
  }
}

- in the main method, we used a reference of the class Vampire as our argument even though the constructor requested an object class Monster
- this is allowed because Vampire is a subclass of the Monster class

Review:

- a Java class can inherit fields and methods from another class
- each Java class requires its own file, but only one class in Java package needs a main() method
- child classes inherit the parent constructor by default, but it's possible to modify the constructor using super() or override it completely
- you can use protected and final to control child access to parent class members
- Java's OOP principle of Polymorphism means you can use a child class object like a member of its parent class, but also give it its own traits
- you can override parent class methods in the child class, ideally using the @Override keyword
- It's possible to use objects of different classes that share a parent class together in an array or ArrayList
