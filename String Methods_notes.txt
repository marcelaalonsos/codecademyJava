String Methods

Introduction

- string class has a lot of useful methods to help us perform operations on string and data manipulation

length()

- the length() method returns the length - the total number of characters - of a string
- take a look at this code:
String str = "Hello World!";

System.out.println(str.length());

- 12 would be printed because str has 12 characters:
H e l l o _ W o r l d !

- in theory, the length of a string is the same as the Unicode units of the String
- for example, escape sequences such as \n count as only one character

concat()

- the concat() method concatenates one string to the end of another string
- concatenation is the operation of joining two strings together
- suppose we have a string called str1 and another called str2
- using str1.concat(str2) would return str1 and str2 appended to the end of it:
String name = new String("Code");

name = name.concat("cademy");

System.out.println(name);

- Codecademy would be printed
- string are immutable objects which means that string methods like concat do not actually change a string object
- our variable name, holds a reference to the string object "code"
- when we use concat() on name, we changed its value so that it references a new object - "Code" combined with the string literal "cademy"

- suppose we do something different
- we'll use concat() on name without reassigning its value:
String name = "Code";

name.concat("cademy");

System.out.println(name);

- Code would be printed instead
- the value of string can't change
- instead, we created a new object and need to assign that new object to a variable

- when we first discussed Objects, we learned that if we tried printing an Object, we'd get an output of the class name and the object's memory address
- if we wanted to get a more useful printout, we'd have to call the Object's toString() method
- this toString() method comes into play with concat()
- if we concatenated a string with another Object, we're really adding the result of that Object's toString() method to our original string
- we can even see this when we concatenate two strings together
- when we use concat() on another string, we don't concatenate its memory address to the original string
- instead, we combine the result of its toString() method to the original string

equals()

- with objects, such as string, we can't use the primitive equality operator == to check for equality between two strings
- to test equality with strings, we use a built-in method called equals():
String flavor1 = "Mango";
String flavor2 = "Peach";

System.out.println(flavor1.equals("Mango"));
// prints true

System.out.println(flavor2.equals("Mango"));
// prints false

- there's also an equalsIgnoreCase() method that compares two strings without considering upper/lower cases

- we can also compare string values lexicographically using the .compareTo() method
- when we call the compareTo() method, each character in the string is converted to Unicode
- the the unicode character from each string is compared
- the method will return an int that represents the difference between the two strings:
String flavor1 = "Mango";
String flavor2 = "Peach";

System.out.println(flavor1.compareTo(flavor2));

- our program will output -3
- when we use .compareTo(), we must pay attention to the return value:
- if the method returns 0, the two strings are equal
- if the value is less than 0, then the string object is lexicographically less than the string object argument
- if the value is greater than 0, then the string object is lexicographically greater than the string object argument

- in the example above, "Mango" comes before "peach" so we get a negative number
- if we did it in reversem we would get a positivive number

- note: make sure the pay attention to capitalization when using .compareTo()
- upper case and lower case letters have different unicode values
- for example comparing Mango and Peach we got -3
- but if we compare mango and Peach we get 29
- the unicode value for lower case m is actually larger than upper case P
- using .compareToIgnoreCase() will perform the same task, but will not consider upper/lower case

indexOf()

- if we want to know the index of the first occurance of a character in a string, we can use the indexOf() method:
String letters = "ABCDEFGHIJKLMN";

System.out.println(letters.indexOf("C"));

- this would print out 2
- although C is the third letter in the alphabet, it is located in the second index of the string
- suppose we want to know the index of the first occurrence of an entire substring
- the indexOf() instance method can also return where the substring begins (the index of the first character in the substring):
String letters = "ABCDEFGHIJKLMN";

System.out.println(letters.indexOf("EFG"));

- this will output 4, because EFG starts at index 4
- if the indexOf() doesn't find what it's looking for, it will return -1

charAt()

- the charAt() method returns the character located at a string's specific index:
String str = "qwer";

System.out.println(str.charAt(2));

- it would output e because that's what's at index 2
- suppose we try to return the character located at index 4
- it would produce and IndexOutOfBoundsException error because index 4 is out of str's range

substring()

- there are many times when we only want part of a string
- we may want to extract a substring from a string
- the substring() method does exactly that:
String line = "The Heav'ns and all the Constellations rung";

System.out.println(line.substring(24));

- it would output Constellations rung because that's what begins at index 24 and ends at the end of the line
- the substring begins with the character at the specified index and extends to the end of the string
- suppose we want a substring from the middle of the string
- we can instead include two arguments in this method:
String line = "The Heav'ns and all the Constellations rung";

System.out.println(line.substring(27, 33));

- when substring() is called with two arguments, the first argument is inclusive and the second is exclusive
- this means, the resulting substring will begin at index 27 and extend up to but not including index 33
- therefore the example above would output stella because that's the substring that begins at index 27 and ends at index 32, one index before 33
- we can use this method to return a single-element substring at a specific index
- we do this by calling substring() with the desired index value as the first argument and then the index value plus one as the second argument:
String line = "The Heav'ns and all the Constellations rung";

System.out.println(line.substring(24, 25));
// Prints: C

toUpperCase() / toLowerCase()

- toUpperCase() returns the string value converted to toUpperCase
- toLowerCase() returns the string value converted to lower case

String input = "Cricket!";

String upper = input.toUpperCase();
// stores "CRICKET!"

String lower = input.toLowerCase();
// stores "cricket!"

- a good use of this functionality is to ensure consistency of the data you store in a database
- making sure all of the data you get from a user is lowercase before you store it in your database will make your database easier to search through later


