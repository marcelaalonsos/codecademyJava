Classes and Objects

- all programs require one or more classes that act as a model for the world
- for example, a program to traxk student test score might have student, course and grade classes
- we represent each student as an instance, or object, of the Student class
- this is object-oriented programming because programs are built around objects and their interactions
- an object contains state and behavior
- classes are a blueprint for objects
- an instance is the thing itself

Classes: Syntax

- a class is the set of instructions that describe how an instance can behave and what information it contains
- Java has pre-defined classes such  as System

- here's the definition of a Java class:

public class Car {
// scope of Car class starts after curly brace

  public static void main(String[] args) {
    // scope of main() starts after curly brace

    // program tasks

  }
  // scope of main() ends after curly brace

}
// scope of Car class ends after curly brace

- this example defines a class named Car
- public is an access level modifier that allows other classes to interact with this class
- this class has a main() method, which lists the tasks performed by the program
- main() runs when we execute the compiled Car.class file


Classes: Constructors

- in order to create an object, we need a constructor method
- the constructor is defined within the class:

public class Car {
  // Constructor method
  public Car() {
    // instructions for creating a Car instance
  }

  public static void main(String[] args) {
    // body of main method
  }
}

- to create an instance, we need to call or invoke the constructor within main():

public class Car {

  public Car() {
    // instructions for creating a Car instance
  }

  public static void main(String[] args) {
    // Invoke the constructor
    Car ferrari = new Car();
  }
}

- in this example, instead of being declared with a primitive data type like int or boolean, our variable ferrari is declared as a reference data type
- this means that the value of our variable is a reference to an instance's memory address
- during its declaration, the class name is used as the variable's type
- in this case, the type is Car
- after the assignment operator =, we invoke the constructor method Car() and use the keyword new to indicatre that we're creating an instance
- Omitting new causes an error

- we can initialize a reference-type variable without assigning it a reference if we utilize the special value null
- something that is null has no value
- if we were to assign null to an object, it would have a void reference

- in the following code snippet, we'll create an instance of Car, assign it a reference and then change its value to null:

Car thunderBird = new Car();
System.out.println(thunderBird); // Prints: Car@76ed5528

thunderBird = null; // change value to null
System.out.println(thunderBird); // Prints: null

- it is important to note that if we use null reference to call a method or access an instance variable, we will receive a NullPointerException error


Classes: Instance Fields

- when an object is created, the constructor sets the initial state of the object
- the state is made up of associated data that represents the characteristics of an object
- we'll add data to an object by introducing instance variables or instance fields
- we want Car instances of different colors, so we declare a String color instance field
- often times, instance variables are described as a "has-a"
- another way to think of this is that instance variables are the nouns and adjectives associated with an object:

public class Car {
  /*
  declare fields inside the class
  by specifying the type and name
  */
  String color;

  public Car() {
    /*
    instance fields available in
    scope of constructor method
    */
  }

  public static void main(String[] args) {
    // body of main method
  }
}

- the declaration is within the class and the instance variable will be available for assignment inside the constructor
- fields are a type of state each instance will possess
- one instance may have red as its color, or blueprint
- it's the job of the constructor to give these instance fields initial value

Classes: Construtor Parameters

- to create objects with dynamic, individual states, we'll use a combination of the constructor method and instance fields
- in order to assign a value to an instance variable, we need to alter our constructor method to include parameters so that it can access the data we want to assign to an instance
- the Car constructor now has a parameter: String carColor:
public class Car {
  String color;
  // constructor method with a parameter
  public Car(String carColor) {
    // parameter value assigned to the field
    color = carColor;
  }
  public static void main(String[] args) {
    // program tasks
  }
}

- when a string value gets passed into car, it is assigned to the parameter carColor
- then, inside the constructor, carColor will be assigned as the value to the instance variable color
- our method also has a signature which defines the name and parameters of the method
- in the example above, the signature is Car(String carColor)

- there are two types of parameters: formal and actual
- a formal parameter specifies the type and name of data than can be passed into a method
- in the example above, String carColor is a formal parameter
- carColor will represent whatever String value is passed into the constructor
- in Java, because of constructor overloading, a class can have multiple constructors as long as they have different parameter values
- the signature is useful in that it helps the compiler differentiate between the different methods:
public class Car {
  String color;
  int mpg;
  boolean isElectric;

  // constructor 1
  public Car(String carColor, int milesPerGallon) {
    color = carColor;
    mpg = milesPerGallon;
  }
  // constructor 2
  public Car(boolean electricCar, int milesPerGallon) {
    isElectric = electricCar;
    mpg = milesPerGallon;
  }
}

- in the example above, there are two constructors
- when we initialize an object, the compiler will know which constructor to use because of the values we pass into it
- for example, Car myCar = new Car(true, 40) will be created by the seconf constructor because the arguments match the type and order of the second constructor's signature

- if we do not define a constructor, the Java compiler will generate a default constructor that contains no arguments and assigns the object default values
- default values can be created by assigning values to the instance fields during their declaration:
public class Car {
  String color = "red";
  boolean isElectric = false;
  int cupHolders = 4;

  public static void main(String[] args) {
    Car myCar = new Car();
    System.out.println(myCar.color); // Prints: red
  }
}

Classes: Assigning Values to Instance Fields

- now that the constructor has a parameter, we must pass values into the method call
- these values are referred to as arguments, once they are passed in, they will be used to give the instance fields initial value
- here we create an instance, ferrari, in the main() method with "red" as its color field:
public class Car {
  String color;

  public Car(String carColor) {
    // assign parameter value to instance field
    color = carColor;
  }

  public static void main(String[] args) {
    // parameter value supplied when calling constructor
    Car ferrari = new Car("red");
  }
}

- we pass the string value red to our constructor method call: new Car("red")
- the type of the value given to the invocation must match the type declared by the parameter
- inside the constructor, the parameter carColor refers to the value passed in during the invokation: "red"
- this value is assigned to the instance field color
- color has already been declared, so we don't specify the type during assignment
- the object, ferrari, holds the state color as an instance field referencing the value "red"
- we access the value of this field with the dot operator . :
/*
accessing a field:
objectName.fieldName
*/

ferrari.color;
// "red"

- an actual parameter, or argument, refers to the value being passed during a method call
- call by value is the process of calling a method with an argument value
- when an argument is passed, the formal parameter is initialized with a copy of the argument value
- for example, when we declare the ferrari object, the String value "Red" is passed as an argument, the formal parameter carColor is assigned a copy of that value

Classes: Multiple Fields

- objects are not limited to a single instance field
- we can declare as many fields as are necessary for the requirements of our program
- let's change Car instances so they have multiple fields
- we'll add a boolean isRunning, and an int velocity

public class Car {
  String color;
  // new fields!
  boolean isRunning;
  int velocity;

  // new parameters that correspond to the new fields
  public Car(String carColor, boolean carRunning, int milesPerHour) {
    color = carColor;
    // assign new parameters to the new fields
    isRunning = carRunning;
    velocity = milesPerHour;
  }

  public static void main(String[] args) {
    // new values passed into the method call
    Car ferrari = new Car("red", true, 27);
    Car renault = new Car("blue", false, 70);

    System.out.println(renault.isRunning);
    // false
    System.out.println(ferrari.velocity);
    // 27
  }
}

- the constructor now has multiple parameters to receive values for the new fields
- we still specify the type as well as the name for each parameter
- we must pass values into the constructor invocation in the same order that they're listed in the parameters:
// values match types, no error
Car honda = new Car("green", false, 0);

// values do not match types, error!
Car junker = new Car(true, 42, "brown");

Classes: Review

- Java is an object-oriented programming language where every program has at least one class.
- Programs are often built from many classes and objects, which are the instances of a class.

- Classes define the state and behavior of their instances.
- Behavior comes from methods defined in the class.
- State comes from instance fields declared inside the class.

- Classes are modeled on the real-world things we want to represent in our program

public class Dog {
  // instance field
  String breed;
  // constructor method
  public Dog(String dogBreed) {
    /*
    value of parameter dogBreed
    assigned to instance field breed
    */
    breed = dogBreed;
  }
  public static void main(String[] args) {
    /*
    create instance:
    use 'new' operator and invoke constructor
    */
    Dog fido = new Dog("poodle");
    /*
    fields are accessed using:
    the instance name, `.` operator, and the field name.
    */
    fido.breed;
    // "poodle"
  }
}
